-- Исследование базы данных Stackoverflow
-- Цель исследования: 
-- Исходные данные: версия Stackoverflow с данными о постах за 2008 г.

-- Задача №1: найти количество вопросов, которые набрали больше 300 очков или как минимум 100 раз были добавлены в «Закладки».

SELECT COUNT(id)
FROM stackoverflow.posts
WHERE (post_type_id = 1) AND (score > 300 OR favorites_count >= 100);

-- Задача №2: найти, сколько в среднем в день задавали вопросов с 1 по 18 ноября 2008 включительно. Результат округлить до целого числа.

SELECT ROUND(AVG(tab1.count))
FROM ( 
    SELECT COUNT(id),
                 creation_date::date
    FROM stackoverflow.posts
    WHERE post_type_id = 1
    GROUP BY creation_date::date
    HAVING creation_date::date BETWEEN '2008-11-01' AND '2008-11-18') AS tab1;

-- Задача №3: найти, сколько пользователей получили значки сразу в день регистрации. Вывести количество уникальных пользователей.

SELECT COUNT(DISTINCT u.id)
FROM stackoverflow.users u
JOIN stackoverflow.badges b ON u.id=b.user_id
WHERE b.creation_date::date=u.creation_date::date

-- Задача №4: найти, сколько уникальных постов пользователя с именем Joel Coehoorn получили хотя бы один голос.

SELECT COUNT(tab1.id)
FROM (
    SELECT DISTINCT p.id
    FROM stackoverflow.posts p
    JOIN stackoverflow.votes v ON p.id=v.user_id
    JOIN stackoverflow.users u ON p.user_id=u.id
    WHERE u.display_name LIKE 'Joel Coehoorn'
    GROUP BY p.id
    HAVING COUNT(v.id) >= 1) AS tab1;

-- Задача №5: выгрузить все поля таблицы vote_types. Добавиьт к таблице поле rank, в которое войдут номера записей в обратном порядке. 
-- Отсортировать таблицу по полю id.

SELECT *,
       ROW_NUMBER () OVER (ORDER BY id DESC) AS rank
FROM stackoverflow.vote_types
ORDER BY id

-- Задача №6: отобрать 10 пользователей, которые поставили больше всего голосов типа Close. Отобразить таблицу из двух полей: идентификатором пользователя и количеством голосов. 
-- Отсортировать данные сначала по убыванию количества голосов, потом по убыванию значения идентификатора пользователя.

SELECT *
FROM (
    SELECT v.user_id,
           COUNT(v.id) AS votes_cnt
    FROM stackoverflow.votes v
    JOIN stackoverflow.vote_types t ON v.vote_type_id=t.id
    WHERE t.name LIKE 'Close'
    GROUP BY v.user_id
    ORDER BY votes_cnt DESC
    LIMIT 10) AS tab1
    
ORDER BY votes_cnt DESC,
         tab1.user_id DESC

-- Задача №7: отобрать 10 пользователей по количеству значков, полученных в период с 15 ноября по 15 декабря 2008 года включительно.
Отобразить несколько полей:
  -- идентификатор пользователя;
  -- число значков;
  -- место в рейтинге — чем больше значков, тем выше рейтинг.
-- Пользователям, которые набрали одинаковое количество значков, присвоить одно и то же место в рейтинге.
-- Отсортировать записи по количеству значков по убыванию, а затем по возрастанию значения идентификатора пользователя.

SELECT *,
       ROW_NUMBER() OVER (ORDER BY tab1.badges_cnt DESC) AS rating
FROM (
    SELECT user_id AS users,
           COUNT(id) AS badges_cnt
    FROM stackoverflow.badges b 
    WHERE creation_date::date BETWEEN '2008-11-15' AND '2008-12-15'
    GROUP BY users
    ORDER BY 2 DESC,
             1
    LIMIT 10) AS tab1;    

-- Задача №8: найти, сколько в среднем очков получает пост каждого пользователя.
-- Сформировать таблицу из следующих полей:
  -- заголовок поста;
  -- идентификатор пользователя;
  -- число очков поста;
  -- среднее число очков пользователя за пост, округлённое до целого числа.
-- Не учитывать посты без заголовка, а также те, что набрали ноль очков.

SELECT title AS posts,
       user_id AS users,
       score,
       ROUND(AVG(score) OVER (PARTITION BY user_id)) AS avg_score
FROM stackoverflow.posts AS p
WHERE title IS NOT NULL AND score <> 0

-- Задача №9: отобразить заголовки постов, которые были написаны пользователями, получившими более 1000 значков. 
-- Посты без заголовков не учитывать.

SELECT title
FROM stackoverflow.posts
WHERE user_id IN
            (SELECT user_id
             FROM stackoverflow.badges
             GROUP BY user_id
             HAVING COUNT(id) > 1000)
AND title IS NOT NULL

-- Задача №10: выгрузить данные о пользователях из США. Разделить пользователей на три группы в зависимости от количества просмотров их профилей:
  -- пользователям с числом просмотров больше либо равным 350 присвойте группу 1;
  -- пользователям с числом просмотров меньше 350, но больше либо равно 100 — группу 2;
  -- пользователям с числом просмотров меньше 100 — группу 3.
-- Отобразить идентификатор пользователя, количество просмотров профиля и группу. 
-- Не учитывать пользователей с нулевым количеством просмотров.

SELECT id,
       views,
       CASE 
             WHEN views >= 350 THEN 1
             WHEN views < 350 AND views >= 100 THEN 2
             WHEN views < 100 THEN 3
       END AS category
FROM stackoverflow.users
WHERE location LIKE '%United States%'
  AND views <> 0


-- Задача №11: отобразить лидеров каждой группы — пользователей, которые набрали максимальное число просмотров в своей группе. 
-- Вывести поля с идентификатором пользователя, группой и количеством просмотров. 
-- Отсортировать таблицу по убыванию просмотров, а затем по возрастанию значения идентификатора.

WITH tab1 AS
    (SELECT id,
           views,
           CASE 
                 WHEN views >= 350 THEN 1
                 WHEN views < 350 AND views >= 100 THEN 2
                 WHEN views < 100 THEN 3
           END AS category
    FROM stackoverflow.users
    WHERE location LIKE '%United States%'
      AND views <> 0),
      
      max_views AS
      (SELECT MAX(views) AS max
       FROM tab1
       GROUP BY tab1.category)
      
SELECT t1.id,
       t1.views,
       t1.category
FROM tab1 t1
JOIN max_views mv ON t1.views=mv.max
WHERE t1.views=mv.max
ORDER BY t1.views DESC,
         t1.id

-- Задача №12: посчитать ежедневный прирост новых пользователей в ноябре 2008 года. Сформировать таблицу с полями:
  -- номер дня;
  -- число пользователей, зарегистрированных в этот день;
  -- сумму пользователей с накоплением.
  
WITH tab1 AS
    (SELECT EXTRACT(DAY FROM creation_date::date) AS days,
           COUNT(id) AS users_cnt
    FROM stackoverflow.users
    WHERE creation_date::date BETWEEN '2008-11-01' AND '2008-11-30'
    GROUP BY EXTRACT(DAY FROM creation_date::date))
    
SELECT *,
       SUM(tab1.users_cnt) OVER (ORDER BY tab1.days) AS cum_users
FROM tab1

-- Задача №13: для каждого пользователя, который написал хотя бы один пост, найти интервал между регистрацией и временем создания первого поста. 
-- Отобразить:
  -- идентификатор пользователя;
  -- разницу во времени между регистрацией и первым постом.
  
WITH tab1 AS
    (SELECT DISTINCT user_id,
            MIN(creation_date) OVER (PARTITION BY user_id) AS first_post
    FROM stackoverflow.posts p)

SELECT t1.user_id,
       t1.first_post - u.creation_date AS diff
FROM stackoverflow.users u
JOIN tab1 t1 ON u.id=t1.user_id  

-- Задача №14: вывести общую сумму просмотров постов за каждый месяц 2008 года. Если данных за какой-либо месяц в базе нет, пропустить такой месяц. 
-- Результат отсортировать по убыванию общего количества просмотров.

SELECT SUM(views_count),
       DATE_TRUNC('month', creation_date)::date
FROM stackoverflow.posts
GROUP BY DATE_TRUNC('month', creation_date)::date
ORDER BY SUM(views_count) DESC

-- Задача №15: вывести имена самых активных пользователей, которые в первый месяц после регистрации (включая день регистрации) дали больше 100 ответов. 
-- Вопросы, которые задавали пользователи, не учитывать. Для каждого имени пользователя вывести количество уникальных значений user_id. 
-- Отсортировать результат по полю с именами в лексикографическом порядке.

SELECT u.display_name,
       COUNT(DISTINCT p.user_id)
FROM stackoverflow.users u
JOIN stackoverflow.posts p ON u.id=p.user_id
JOIN stackoverflow.post_types pt ON p.post_type_id=pt.id       
WHERE p.creation_date::date BETWEEN u.creation_date::date AND (u.creation_date::date + INTERVAL '1 month')
  AND pt.type LIKE 'Answer'
GROUP BY u.display_name
HAVING COUNT(pt.id) > 100
ORDER BY display_name;

-- Задача №16: вывести количество постов за 2008 год по месяцам. Отобрать посты от пользователей, которые зарегистрировались в сентябре 2008 года и сделали хотя бы один пост в декабре того же года. 
-- Отсортировать таблицу по значению месяца по убыванию.

WITH tab1 AS
    (SELECT DISTINCT p.user_id
    FROM stackoverflow.posts p
    JOIN stackoverflow.users u ON p.user_id=u.id
    WHERE (u.creation_date::date BETWEEN '2008-09-01' AND '2008-09-30')
      AND (p.creation_date::date BETWEEN '2008-12-01' AND '2008-12-31'))

SELECT COUNT(p.id),
       DATE_TRUNC('month', p.creation_date)::date      
FROM tab1 t1
JOIN stackoverflow.posts p ON t1.user_id=p.user_id
GROUP BY DATE_TRUNC('month', p.creation_date)::date
ORDER BY DATE_TRUNC('month', p.creation_date)::date DESC;

-- Задача №17: вывести несколько полей:
  -- идентификатор пользователя, который написал пост;
  -- дата создания поста;
  -- количество просмотров у текущего поста;
  -- сумму просмотров постов автора с накоплением.
-- Отсортировать данные по возрастанию идентификаторов пользователей, а данные об одном и том же пользователе — по возрастанию даты создания поста.

SELECT user_id,
       creation_date,
       views_count,
       SUM(views_count) OVER (PARTITION BY user_id ORDER BY creation_date)
FROM stackoverflow.posts

-- Задача №18: найти, сколько в среднем дней в период с 1 по 7 декабря 2008 года включительно пользователи взаимодействовали с платформой. 
-- Для каждого пользователя отобрать дни, в которые он или она опубликовали хотя бы один пост. Округлить результат.

WITH tab1 AS
    (SELECT user_id,
            COUNT(DISTINCT creation_date::date) AS days
    FROM stackoverflow.posts
    WHERE creation_date::date BETWEEN '2008-12-01' AND '2008-12-07'
    GROUP BY user_id)
    
SELECT ROUND(AVG(tab1.days))
FROM tab1

-- Задача №19: найти, на сколько процентов менялось количество постов ежемесячно с 1 сентября по 31 декабря 2008 года. 
-- Отобразить таблицу со следующими полями:
  -- номер месяца;
  -- количество постов за месяц;
  -- процент, который показывает, насколько изменилось количество постов в текущем месяце по сравнению с предыдущим.
-- Округлить значение процента до двух знаков после запятой.

WITH tab1 AS
    (SELECT EXTRACT(MONTH FROM creation_date::date) AS dates,
            COUNT(id) AS posts_cnt
    FROM stackoverflow.posts
    WHERE creation_date::date BETWEEN '2008-09-01' AND '2008-12-31'
    GROUP BY dates)

SELECT *,
       ROUND(((posts_cnt::numeric / LAG(posts_cnt) OVER (ORDER BY dates)) - 1) * 100, 2)
FROM tab1

-- Задача №20: выгрузить данные активности пользователя, который опубликовал больше всего постов за всё время. 
-- Вывести данные за октябрь 2008 года в таком виде:
  -- номер недели;
  -- дата и время последнего поста, опубликованного на этой неделе.
  
WITH tab1 AS (SELECT user_id,
                      COUNT(id) posts_cnt,
                      ROW_NUMBER() OVER (ORDER BY COUNT(id) DESC) AS posts
              FROM stackoverflow.posts
              GROUP BY user_id
              ORDER BY COUNT(id) DESC),
              
     tab2 AS (SELECT user_id
              FROM tab1
              WHERE posts = 1)
              
SELECT DISTINCT
       EXTRACT(WEEK FROM creation_date),
       LAST_VALUE(creation_date) OVER (PARTITION BY EXTRACT(WEEK FROM creation_date) ORDER BY creation_date ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM stackoverflow.posts p
JOIN tab2 t2 ON p.user_id=t2.user_id
WHERE creation_date::date BETWEEN '2008-10-01' AND '2008-10-31'
